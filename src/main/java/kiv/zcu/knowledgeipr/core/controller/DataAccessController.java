package kiv.zcu.knowledgeipr.core.controller;

import com.fasterxml.jackson.databind.JsonNode;
import com.mongodb.MongoExecutionTimeoutException;
import com.mongodb.MongoQueryException;
import javafx.util.Pair;
import kiv.zcu.knowledgeipr.analysis.summarizer.TextSummarizer;
import kiv.zcu.knowledgeipr.analysis.wordnet.WordNet;
import kiv.zcu.knowledgeipr.core.dataaccess.DataSourceType;
import kiv.zcu.knowledgeipr.core.dataaccess.DbRecord;
import kiv.zcu.knowledgeipr.core.dataaccess.mongo.IDataSearcher;
import kiv.zcu.knowledgeipr.core.dataaccess.mongo.IQueryRunner;
import kiv.zcu.knowledgeipr.core.dataaccess.mongo.MongoQueryRunner;
import kiv.zcu.knowledgeipr.core.database.service.DbQueryService;
import kiv.zcu.knowledgeipr.core.query.ChartQuery;
import kiv.zcu.knowledgeipr.core.query.Query;
import kiv.zcu.knowledgeipr.core.report.*;
import kiv.zcu.knowledgeipr.core.utils.SerializationUtils;
import kiv.zcu.knowledgeipr.rest.errorhandling.ObjectSerializationException;
import kiv.zcu.knowledgeipr.rest.errorhandling.UserQueryException;
import kiv.zcu.knowledgeipr.rest.response.*;

import java.util.Collections;
import java.util.List;
import java.util.logging.Logger;

/**
 * Class serves as a mediator between the REST API services and data access.
 * The main task of this class is to accept calls from REST API and return generated response,
 * which is sent back to the REST API.
 * The response is generated by first invoking the data retrieval module to get a result set.
 * The report creator is invoked to generate a report from the result set which is then sent back.
 */
public class DataAccessController {
    private final static Logger LOGGER = Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);

    /**
     * Instantiates reports instances
     */
    private ReportCreator reportCreator;

    /**
     * Provides methods for searching the target database for data
     */
    private IDataSearcher dataSearcher;

    /**
     * Provides methods for running concrete queries on the target database
     */
    private IQueryRunner queryRunner;

    /**
     * A database service class which manipulates the SQL database. Mainly used for caching queries, reports...
     */
    private DbQueryService dbQueryService;

    private WordNet wordNet;
    private TextSummarizer summarizer;

    public DataAccessController(IDataSearcher dataSearcher) {
        this.dataSearcher = dataSearcher;

        reportCreator = new ReportCreator(new FileRepository());

        queryRunner = new MongoQueryRunner();

        wordNet = new WordNet();
        summarizer = new TextSummarizer();
        dbQueryService = new DbQueryService();
    }

    /**
     * Initiates the execution of the query on the target database and gets a list of
     * results. Finally generates a report instance from the returned results.
     *
     * @param query - query to process
     * @param page  - page number to display
     * @return BaseResponse object encapsulating the report.
     */
    // TODO: Refactor
    public StandardResponse runSearch(Query query, int page, int limit, boolean advanced) {
        StandardResponse response;
        try {
            DataReport report;
            report = dbQueryService.getReportForQuery(query, page, limit);
            if (report == null) {
                List<DbRecord> dbRecordList;
                if (advanced) {
                    dbRecordList = dataSearcher.runSearchAdvanced(query, page, limit);
                } else {
                    dbRecordList = dataSearcher.runSearchSimple(query, page, limit);
                }
                report = reportCreator.createReport(dbRecordList);

                dbQueryService.saveQuery(query, report, limit, page);
            }

            response = new StandardResponse(StatusResponse.SUCCESS, "OK", report);
            response.setSearchedCount(getCountForDataSource(query.getSourceType()));
            response.setCount(limit);
            response.setPage(page);
            //response.setSummary(summarizer.summarizeTextMongo(dbRecordList).toString());

        } catch (MongoQueryException | UserQueryException e) {
            e.printStackTrace();
            response = new StandardResponse(StatusResponse.ERROR, e.getMessage(), new DataReport(Collections.emptyList()));
            LOGGER.warning("Query processing was prematurely terminated: " + e.getMessage());
        } catch (MongoExecutionTimeoutException e) {
            response = new StandardResponse(StatusResponse.ERROR, e.getMessage(), new DataReport(Collections.emptyList()));
            LOGGER.info(e.getMessage());
        }

        return response;
    }

    public <T, V> ChartResponse chartQuery(ChartQuery<T, V> chartQuery, String filename, DataSourceType collectionName) throws ObjectSerializationException {
        return chartQuery(chartQuery, filename, collectionName, false);
    }

    /**
     * Runs a chart query on the target database. First a cache is checked, if the report is not already generated.
     * In case a cached version is found, it is returned immediately. If the cache does not exist, a query to the
     * target database is constructed and run. The results are collected and a report instance is constructed.
     * Finally a response object is created with the report and returned.
     *
     * @param chartQuery     The query instance which will create the query and retrieve the results
     * @param filename       - The filename under which the final report should be saved, TODO: replace
     * @param collectionName - Name of the collection, on which to run the query (patents or publications)
     * @param overwrite      - Flag specifying whether to overwrite the file TODO: change
     * @param <T>            - The X value data type on the result chart
     * @param <V>            - The Y value data type on the result chart
     * @return - The chart response object
     * @throws ObjectSerializationException in case of serialization errors
     */
    public <T, V> ChartResponse chartQuery(ChartQuery<T, V> chartQuery, String filename, DataSourceType collectionName, boolean overwrite)
            throws ObjectSerializationException {
        JsonNode cachedReport = reportCreator.loadReportToJsonFromFile(collectionName + "\\" + filename);
        if (cachedReport != null && !overwrite) {
            LOGGER.info("Cached report found for " + filename);
            return new ChartResponse(StatusResponse.SUCCESS, "OK", cachedReport);
        }

        LOGGER.info("Querying database for: " + chartQuery.getTitle());

        List<Pair<T, V>> list = chartQuery.get();
        ChartReport<T, V> report = reportCreator.createChartReport(chartQuery.getTitle(), chartQuery.getxLabel(), chartQuery.getyLabel(), list);

        report.save(collectionName + "\\" + filename);

        cachedReport = SerializationUtils.getTreeFromObject(report);

        return new ChartResponse(StatusResponse.SUCCESS, "OK", cachedReport);
    }

    // TODO: probably delete or hardcode
    public SimpleResponse getCountAuthors(DataSourceType collectionName) throws ObjectSerializationException {
        String reportName = "countOfAuthors.json";

        JsonNode cachedReport = reportCreator.loadReportToJsonFromFile(collectionName.value + "\\" + reportName);
        if (cachedReport == null) {
            LOGGER.info("Cached report could not be found, querying database");
            // The cached file could not be loaded, we need to fetch new results from the database
            //int authorCount = queryRunner.getPeopleCount(collectionName, "authors");

            //int authorCount = 2;
            int authorCount = 120000;

            SimpleReport simpleReport = new SimpleReport(authorCount);
            simpleReport.save(collectionName.value + "\\" + reportName);

            cachedReport = SerializationUtils.getTreeFromObject(simpleReport);
        }

        return new SimpleResponse(cachedReport);
    }

    public WordNetResponse getSynonyms(String word) {
        List<String> synonyms = wordNet.getSynonymsForWord(word);
        List<String> hypernyms = wordNet.getHypernymsForWord(word);
        return new WordNetResponse(synonyms, hypernyms);
    }

    private int getCountForDataSource(String source) {
        int count = 0;
        if (source.equals("publication")) {
            count = 166613546;
        } else if (source.equals("patent")) {
            count = 3645421;
        }

        return count;
    }

    public IQueryRunner getQueryRunner() {
        return queryRunner;
    }
}
